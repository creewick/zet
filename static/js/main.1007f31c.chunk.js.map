{"version":3,"sources":["studyPlan.js","context.js","components/ZETBar.js","components/Course.js","components/Semester.js","serviceWorker.js","index.js","App.js","useLocalStorage.js"],"names":["bySemester","map","i","plan","filter","c","semester","requiredCourses","required","sumOf","codes","includes","code","points","reduce","a","b","percReqOf","sumReqOf","config","maxPoints","percAddOf","percOf","createContext","ZETBar","ctx","useContext","context","get","sum","useMemo","reqPercent","addPercent","sumPercent","className","Progress","multi","bar","color","value","Course","course","set","classes","classnames","textColor","key","Input","type","id","checked","onChange","htmlFor","name","mod","Semester","courses","index","toHtml","groupByFilter","title","some","Boolean","window","location","hostname","match","ReactDOM","render","useState","localStorage","JSON","parse","stringify","newValue","useLocalStorage","x","Provider","Container","Button","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1007f31c.chunk.js","sourcesContent":["import plan from './htmlParser/plan.json';\nimport config from './config';\n\nexport const bySemester = [1, 2, 3, 4, 5, 6, 7, 8]\n    .map((i) => plan\n        .filter((c) => c.semester === i));\n\nexport const requiredCourses = plan\n    .filter((c) => c.required);\n\nexport const sumOf = (codes) => plan\n    .filter((c) => codes.includes(c.code))\n    .map((c) => c.points)\n    .reduce((a, b) => a + b, 0);\n\nexport const sumReqOf = (codes) => plan\n    .filter((c) => codes.includes(c.code) && c.required)\n    .map((c) => c.points)\n    .reduce((a, b) => a + b, 0);\n\nexport const percOf = (codes) => sumOf(codes) / config.maxPoints * 100;\n\nexport const percReqOf = (codes) => sumReqOf(codes) / config.maxPoints * 100;\n\nexport const percAddOf = (codes) => percOf(codes) - percReqOf(codes);\n\nexport const toModuleCode = (courseCode) => `М.${courseCode.match(/(\\d+\\.\\d+)\\.\\d+/)[1]}`;\n\nexport default plan;\n","import { createContext } from 'react';\n\nexport default createContext({});\n","import React, { useMemo, useContext } from 'react';\nimport { Progress } from 'reactstrap';\nimport config from '../config';\nimport { percAddOf, percReqOf, sumOf } from '../studyPlan';\nimport context from '../context';\n\nexport default function ZETBar() {\n    const ctx = useContext(context);\n    const { get } = ctx;\n\n    const sum = useMemo(() => sumOf(get), [ctx]);\n    const reqPercent = useMemo(() => percReqOf(get), [ctx]);\n    const addPercent = useMemo(() => percAddOf(get), [ctx]);\n    const sumPercent = useMemo(() => reqPercent + addPercent, [ctx]);\n\n    return (\n      <header className=\"sticky-top\">\n        <Progress multi className=\"rounded-0\">\n          <Progress bar color=\"danger\" value={reqPercent} />\n          <Progress bar color=\"warning\" value={addPercent} />\n        </Progress>\n        <Progress multi className=\"mt-n3 text-center\">\n          <Progress bar color=\"transparent\" value={sumPercent} className=\"text-right font-weight-bold pr-1\">\n            {sum} / {config.maxPoints}\n          </Progress>\n        </Progress>\n      </header>\n    );\n}\n","import React, { useContext } from 'react';\nimport { Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport context from '../context';\n\nexport default function Course({ course }) {\n    const ctx = useContext(context);\n    const { get, set } = ctx;\n\n    const inputClick = (code) => {\n        if (get.includes(code)) {\n            set(get.filter((c) => c !== code));\n        } else {\n            set([...get, code]);\n        }\n    };\n\n    const classes = classnames(\n        'd-flex',\n        'p-2',\n        {\n            'bg-light': !get.includes(course.code),\n            'shadow': !get.includes(course.code),\n            'shadow-sm': get.includes(course.code),\n        },\n    );\n\n    const textColor = get.includes(course.code)\n        ? 'text-secondary'\n        : 'text-primary';\n\n    return (\n      <div key={course.code}>\n        <Input\n          type=\"checkbox\"\n          id={course.code}\n          checked={get.includes(course.code)}\n          onChange={() => inputClick(course.code)}\n          className=\"d-none\"\n        />\n        <label htmlFor={course.code} className={classes}>\n          <div className=\"d-flex flex-column pr-3\">\n            <h3 className={`m-0 text-center ${textColor}`}>{course.points}</h3>\n            <small className=\"m-0\">ЗЕТ</small>\n          </div>\n          <div className=\"d-flex flex-column\">\n            <p className={`m-0 ${textColor}`}>{course.name}</p>\n            <p className=\"m-0 text-secondary\">Модуль {course.mod}</p>\n          </div>\n        </label>\n      </div>\n    );\n}\n\nCourse.propTypes = {\n    course: PropTypes.shape({\n        code: PropTypes.string.isRequired,\n        mod: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        points: PropTypes.number.isRequired,\n    }).isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Course from './Course';\n\nexport default function Semester({ courses, index }) {\n    const toHtml = (c) => <Course course={c} />;\n\n    const groupByFilter = (filter, title) => (courses.some(filter)\n        ? (\n          <div className=\"p-2 col\">\n            <h5>{title}</h5>\n            {courses.filter(filter).map(toHtml)}\n          </div>\n        )\n        : null);\n\n\n    return (\n      <div key={index}>\n        <h3 className=\"mt-5\">{`Семестр ${index + 1}`}</h3>\n        <div className=\"d-flex flex-column flex-md-row\">\n          { groupByFilter((c) => c.required, 'Обязательные')}\n          { groupByFilter((c) => !c.required, 'Спец. курсы')}\n        </div>\n      </div>\n    );\n}\n\nSemester.propTypes = {\n    courses: PropTypes.arrayOf(\n        PropTypes.shape({\n            required: PropTypes.bool.isRequired,\n        }).isRequired,\n    ).isRequired,\n    index: PropTypes.number.isRequired,\n};\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Container, Button } from 'reactstrap';\nimport { bySemester, requiredCourses } from './studyPlan';\nimport useLocalStorage from './useLocalStorage';\nimport ZETBar from './components/ZETBar';\nimport Context from './context';\nimport Semester from './components/Semester';\n\nexport default function App() {\n    const [get, set] = useLocalStorage(\n        'selected',\n        requiredCourses.map((x) => x.code),\n    );\n\n    const reset = () => set(requiredCourses.map((x) => x.code));\n\n    return (\n      <div className=\"App\">\n        <Context.Provider value={{ get, set }}>\n          <ZETBar />\n          <Container>\n            <div className=\"d-flex\">\n            <h2 className=\"mr-3\">Список курсов</h2>\n            <Button className=\"m-1\" onClick={reset}>Reset</Button>\n            </div>\n            { bySemester && bySemester\n                .map((courses, i) => <Semester courses={courses} index={i} />)}\n          </Container>\n        </Context.Provider>\n      </div>\n    );\n}\n","import { useState } from 'react';\n\nexport default function useLocalStorage(name, value) {\n    const [get, set] = useState(localStorage[name]\n        ? JSON.parse(localStorage[name])\n        : value);\n\n    if (!localStorage[name]) localStorage[name] = JSON.stringify(get);\n\n    const newSet = (newValue) => {\n        localStorage[name] = JSON.stringify(newValue);\n        set(newValue);\n    };\n\n    return [get, newSet];\n}\n"],"sourceRoot":""}