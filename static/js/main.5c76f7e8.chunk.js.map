{"version":3,"sources":["studyPlan.js","serviceWorker.js","index.js","App.js","useLocalStorage.js"],"names":["bySemester","map","i","plan","filter","c","semester","requiredCourses","required","sumOf","codes","includes","code","points","reduce","a","b","sumRequiredOf","Boolean","window","location","hostname","match","ReactDOM","render","name","value","useState","localStorage","JSON","parse","get","set","stringify","newValue","useLocalStorage","x","selected","setSelected","sum","useMemo","reqPercent","config","maxPoints","addPercent","courseView","key","Input","type","id","checked","onChange","htmlFor","mod","className","Container","Progress","multi","bar","color","some","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c76f7e8.chunk.js","sourcesContent":["import plan from './htmlParser/plan.json';\n\nexport const bySemester = [1, 2, 3, 4, 5, 6, 7, 8]\n    .map((i) => plan\n        .filter((c) => c.semester === i));\n\nexport const requiredCourses = plan\n    .filter((c) => c.required);\n\nexport const sumOf = (codes) => plan\n    .filter((c) => codes.includes(c.code))\n    .map((c) => c.points)\n    .reduce((a, b) => a + b, 0);\n\nexport const sumRequiredOf = (codes) => plan\n    .filter((c) => codes.includes(c.code) && c.required)\n    .map((c) => c.points)\n    .reduce((a, b) => a + b, 0);\n\nexport const toModuleCode = (courseCode) => `лю.${courseCode.match(/(\\d+\\.\\d+)\\.\\d+/)[1]}`;\n\nexport default plan;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useMemo } from 'react';\nimport { Input, Container, Progress } from 'reactstrap';\nimport { sumOf, bySemester, requiredCourses, sumRequiredOf } from './studyPlan';\nimport useLocalStorage from './useLocalStorage';\nimport config from './config.json';\n\nexport default function App() {\n    const [selected, setSelected] = useLocalStorage(\n        'selected',\n        requiredCourses.map((x) => x.code),\n    );\n\n    const sum = useMemo(() => sumOf(selected), [selected]);\n    const reqPercent = useMemo(() => sumRequiredOf(selected) / config.maxPoints * 100, [selected]);\n    const addPercent = useMemo(() => (sumOf(selected) - sumRequiredOf(selected)) / config.maxPoints * 100, [selected]);\n\n    const inputClick = (code) => {\n        if (selected.includes(code)) {\n            setSelected(selected.filter((c) => c !== code));\n        } else {\n            setSelected([...selected, code]);\n        }\n    };\n\n    const courseView = (c) => (\n      <div key={c.code}>\n        <Input type=\"checkbox\" id={c.code} checked={selected.includes(c.code)} onChange={() => inputClick(c.code)} />\n        <label htmlFor={c.code}>лю.{c.mod} - {c.name} - {c.points}</label>\n      </div>\n    );\n\n    return (\n      <div className=\"App\">\n        <header className=\"fixed-top bg-light\">\n          <Container className=\"d-flex\">\n            <h1 className=\"pr-5 my-header\">лџл░л╗Лїл║ЛЃл╗ЛЈЛѓлЙЛђ лЌлЋлб</h1>\n            <h2 className=\"align-self-center\">лалхлиЛЃл╗ЛїЛѓл░Лѓ: {sum} лИли {config.maxPoints}.</h2>\n          </Container>\n          <Progress multi className=\"rounded-0\">\n            <Progress bar color=\"danger\" value={reqPercent} />\n            <Progress bar color=\"warning\" value={addPercent} />\n          </Progress>\n        </header>\n        <Container className=\"mt-5\">\n          { bySemester && bySemester\n              .map((x, i) => (\n                <div key={i}>\n                  <h2>лАлхл╝лхЛЂЛѓЛђ {i + 1}</h2>\n                  <div className=\"d-flex\">\n                    { x.some((c) => c.required) && (\n                      <div>\n                        <h3>лъл▒ЛЈлил░Лѓлхл╗ЛїлйЛІлх</h3>\n                        {x.filter((c) => c.required).map(courseView)}\n                      </div>\n                    )}\n                    { x.some((c) => !c.required) && (\n                      <div>\n                        <h3>лАл┐лхЛє. л║ЛЃЛђЛЂЛІ</h3>\n                        {x.filter((c) => !c.required).map(courseView)}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n        </Container>\n\n      </div>\n    );\n}\n","import { useState } from 'react';\n\nexport default function useLocalStorage(name, value) {\n    const [get, set] = useState(localStorage[name]\n        ? JSON.parse(localStorage[name])\n        : value);\n\n    if (!localStorage[name]) localStorage[name] = JSON.stringify(get);\n\n    const newSet = (newValue) => {\n        localStorage[name] = JSON.stringify(newValue);\n        set(newValue);\n    };\n\n    return [get, newSet];\n}\n"],"sourceRoot":""}