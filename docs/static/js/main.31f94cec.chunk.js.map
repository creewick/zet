{"version":3,"sources":["getStudyPlan.js","serviceWorker.js","index.js","App.js"],"names":["isModulesHeader","tr","getElementsByClassName","innerText","includes","getModule","cells","getElementsByTagName","name","match","points","parseInt","code","courses","required","additional","getType","getCourse","length","types","split","semesters","map","htmlAsString","html","document","createElement","innerHTML","lines","result","modules","curModule","curType","type","className","push","course","Boolean","window","location","hostname","ReactDOM","render","useState","plan","setPlan","useEffect","fetch","then","r","text","getStudyPlan","m","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kLAAMA,EAAkB,SAACC,GAAD,OAAQA,EAAGC,uBAAuB,MAAM,GAAGC,UAAUC,SAAS,yCAEhFC,EAAY,SAACJ,GACf,IAAMK,EAAQL,EAAGM,qBAAqB,MAChCC,EAAOF,EAAM,GAAGH,UAAUM,MAAM,2BAChCC,EAASC,SAASL,EAAM,GAAGH,UAAW,IAE5C,MAAO,CACHS,KAAMJ,EAAK,GACXA,KAAMA,EAAK,GACXE,SACAG,QAAS,CACLC,SAAU,GACVC,WAAY,MAKlBC,EAAU,SAACf,GACb,IAAMO,EAAOP,EAAGM,qBAAqB,KAAK,GAAGJ,UAE7C,OAAIK,EAAKJ,SAAS,oDAAoB,KAC/BI,EAAKJ,SAAS,qDACf,aACA,YAGJa,EAAY,SAAChB,GACf,IAAMK,EAAQL,EAAGM,qBAAqB,MACtC,GAAID,EAAMY,OAAS,EAAG,OAAO,KAE7B,IAAMV,EAAOF,EAAM,GAAGH,UAAUM,MAAM,wBAChCC,EAASC,SAASL,EAAM,GAAGH,UAAW,IACtCgB,EAAQb,EAAM,GAAGH,UAAUiB,MAAM,MACjCC,EAAYf,EAAM,GAAGH,UAAUiB,MAAM,MAAME,IAAIX,UAErD,MAAO,CACHC,KAAMJ,EAAK,GACXA,KAAMA,EAAK,GACXE,SACAS,QACAE,cAIO,WAACE,GACZ,IAAMC,EAAOC,SAASC,cAAc,QACpCF,EAAKG,UAAYJ,EAEjB,IACMK,EADQJ,EAAKtB,uBAAuB,kBAAkB,GACxCK,qBAAqB,MAEnCsB,EAAS,CAAEC,QAAS,IACtBC,EAAY,KACZC,EAAU,KATe,uBAW7B,YAAiBJ,EAAjB,+CAAwB,CAAC,IAAd3B,EAAa,QACdgC,EAAOhC,EAAGiC,UAEhB,GAAa,cAATD,IAAyBjC,EAAgBC,GAAK,MAQlD,GAPa,qBAATgC,IACAF,EAAY1B,EAAUJ,GACtB4B,EAAOC,QAAQK,KAAKJ,IAEX,oBAATE,IACAD,EAAUhB,EAAQf,IAET,KAATgC,EAAa,CACb,IAAMG,EAASnB,EAAUhB,GACrB8B,GAAaC,GAAWI,GACxBL,EAAUlB,QAAQmB,GAASG,KAAKC,KAzBf,kFA8B7B,OAAOP,GC/DSQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCbNgC,IAASC,OAAO,kBCFD,WAAgB,IAAD,EACFC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,KAU1B,OAPAC,oBAAU,WACNC,MAAM,uEACDC,KAAK,SAACC,GAAD,OAAOA,EAAEC,SACdF,KAAKG,GACLH,KAAKH,IACX,IAGD,yBAAKX,UAAU,OACVU,EAAKd,SAAWc,EAAKd,QAAQR,IAAI,SAAA8B,GAAC,OAAI,4BAAKA,EAAE5C,UDVxC,MAASiB,SAAS4B,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMR,KAAK,SAAAS,GACjCA,EAAaC,iB","file":"static/js/main.31f94cec.chunk.js","sourcesContent":["const isModulesHeader = (tr) => tr.getElementsByClassName('c1')[0].innerText.includes('модули');\n\nconst getModule = (tr) => {\n    const cells = tr.getElementsByTagName('td');\n    const name = cells[0].innerText.match(/(М\\.\\d+\\.\\d+) (.*)/);\n    const points = parseInt(cells[1].innerText, 10);\n\n    return {\n        code: name[1],\n        name: name[2],\n        points,\n        courses: {\n            required: [],\n            additional: [],\n        },\n    };\n};\n\nconst getType = (tr) => {\n    const name = tr.getElementsByTagName('i')[0].innerText;\n\n    if (name.includes('Контроль')) return null;\n    return name.includes('По выбору')\n        ? 'additional'\n        : 'required';\n};\n\nconst getCourse = (tr) => {\n    const cells = tr.getElementsByTagName('td');\n    if (cells.length < 4) return null;\n\n    const name = cells[0].innerText.match(/(\\d+\\.\\d+\\.\\d+) (.*)/);\n    const points = parseInt(cells[1].innerText, 10);\n    const types = cells[2].innerText.split(', ');\n    const semesters = cells[3].innerText.split(', ').map(parseInt);\n\n    return {\n        code: name[1],\n        name: name[2],\n        points,\n        types,\n        semesters,\n    };\n};\n\nexport default (htmlAsString) => {\n    const html = document.createElement('html');\n    html.innerHTML = htmlAsString;\n\n    const table = html.getElementsByClassName('edication-plan')[0];\n    const lines = table.getElementsByTagName('tr');\n\n    const result = { modules: [] };\n    let curModule = null;\n    let curType = null;\n\n    for (const tr of lines) {\n        const type = tr.className;\n\n        if (type === 'tr-header' && !isModulesHeader(tr)) break;\n        if (type === 'tr-second-header') {\n            curModule = getModule(tr);\n            result.modules.push(curModule);\n        }\n        if (type === 'tr-third-header') {\n            curType = getType(tr);\n        }\n        if (type === '') {\n            const course = getCourse(tr);\n            if (curModule && curType && course) {\n                curModule.courses[curType].push(course);\n            }\n        }\n    }\n\n    return result;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport getStudyPlan from './getStudyPlan';\n\nexport default function App() {\n    const [plan, setPlan] = useState({});\n\n    useEffect(() => {\n        fetch('https://raw.githubusercontent.com/creewick/zet/master/src/plan.html')\n            .then((r) => r.text())\n            .then(getStudyPlan)\n            .then(setPlan);\n    }, []);\n\n    return (\n      <div className=\"App\">\n          {plan.modules && plan.modules.map(m => <h1>{m.name}</h1>)}\n      </div>\n    );\n}\n"],"sourceRoot":""}